import logging, os, pytz
from datetime import datetime, time as dtime, timedelta

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
)
from telegram.helpers import escape_markdown  # ‚Üê used everywhere we send Markdown V2

import database
from coingecko import (
    get_market_summary,
    get_top_gainers_losers,
    lookup_coin,
    get_coin_price,
    check_alerts,
)
from summarize import summarize_text

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ basics ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _parse_time(text: str) -> str | None:
    """Validate HH:MM 24-h and return canonical 'HH:MM' or None."""
    try:
        h, m = map(int, text.split(":"))
        if 0 <= h < 24 and 0 <= m < 60:
            return f"{h:02d}:{m:02d}"
    except ValueError:
        pass
    return None


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üìä –°–≤–æ–¥–∫–∞ —Ä—ã–Ω–∫–∞", callback_data="summary")],
        [InlineKeyboardButton("üìà –¢–æ–ø —Ä–∞—Å—Ç—É—â–∏–µ/–ø–∞–¥–∞—é—â–∏–µ", callback_data="gainers")],
        [InlineKeyboardButton("üí∞ –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã", callback_data="price_search")],
        [InlineKeyboardButton("üíº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")],
        [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="alerts")],
        [InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏", callback_data="settime")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_time_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    keyboard = [
        [InlineKeyboardButton("06:00", callback_data="time|06:00"),
         InlineKeyboardButton("09:00", callback_data="time|09:00"),
         InlineKeyboardButton("12:00", callback_data="time|12:00")],
        [InlineKeyboardButton("15:00", callback_data="time|15:00"),
         InlineKeyboardButton("18:00", callback_data="time|18:00"),
         InlineKeyboardButton("21:00", callback_data="time|21:00")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_back_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])


def get_alerts_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="add_alert")],
        [InlineKeyboardButton("üìã –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="list_alerts")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_portfolio_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    keyboard = [
        [InlineKeyboardButton("üìä –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio_overview")],
        [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", callback_data="transactions_list")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data="add_buy")],
        [InlineKeyboardButton("‚ûñ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É", callback_data="add_sell")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


async def send_daily_summary(context: ContextTypes.DEFAULT_TYPE):
    uid = context.job.data["user_id"]
    if not (user := database.get_user(uid)):
        return
    raw_snapshot = get_market_summary()
    plain = summarize_text(raw_snapshot) + "\n\n_Not financial advice_"
    md = escape_markdown(plain, version=2)
    await context.bot.send_message(uid, md, parse_mode="MarkdownV2")


async def check_price_alerts(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    alerts = database.get_all_active_alerts()
    if not alerts:
        return
        
    triggered = check_alerts(alerts)
    
    for alert in triggered:
        user_id = alert["user_id"]
        coin = alert["coin"].upper()
        target = alert["target"]
        above = alert["above"]
        current_price = get_coin_price(alert["coin"])
        
        if current_price is None:
            continue
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        direction = "–≤—ã—à–µ" if above else "–Ω–∏–∂–µ"
        msg = (
            f"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ*\n\n"
            f"*{coin}* –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏!\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}\n"
            f"–¶–µ–ª—å: ${target:,.2f} ({direction})\n\n"
            f"_–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ_"
        )
        
        try:
            await context.bot.send_message(
                user_id, 
                escape_markdown(msg, version=2), 
                parse_mode="MarkdownV2"
            )
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            database.deactivate_alert(alert["id"])
        except Exception as e:
            logger.error(f"Failed to send alert to {user_id}: {e}")


def schedule_user_summary(app, uid: int, tz: str, hhmm: str):
    """Create/replace the JobQueue task that delivers daily summary."""
    job_name = f"daily-{uid}"
    for j in app.job_queue.get_jobs_by_name(job_name):
        j.schedule_removal()

    hour, minute = map(int, hhmm.split(":"))
    user_tz = pytz.timezone(tz)
    now_loc = datetime.now(user_tz)
    target = user_tz.localize(datetime.combine(now_loc.date(), dtime(hour, minute)))
    if target <= now_loc:
        target += timedelta(days=1)

    delay = (target.astimezone(pytz.utc) - datetime.now(pytz.utc)).total_seconds()

    app.job_queue.run_repeating(
        send_daily_summary,
        interval=24 * 3600,
        first=delay,
        name=job_name,
        data={"user_id": uid},
        chat_id=uid,
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ command handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    database.upsert_user(uid)
    msg = (
        "üëã Crypto Summary Bot\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
    )
    await update.message.reply_text(msg, reply_markup=get_main_menu_keyboard())


async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_snapshot = get_market_summary()
    plain = summarize_text(raw_snapshot) + "\n\n_Not financial advice_"
    md = escape_markdown(plain, version=2)
    await update.message.reply_markdown_v2(md, reply_markup=get_back_keyboard())


TIMEZONES = ["UTC", "Europe/London", "US/Eastern", "Asia/Singapore"]


async def settime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user = database.get_user(uid) or {}
    if context.args:
        hhmm = _parse_time(context.args[0])
        if not hhmm:
            await update.message.reply_text("Use /settime HH:MM (24-hour).")
            return
        database.upsert_user(uid, summary_at=hhmm)
        tz = user.get("tz", "UTC")
        schedule_user_summary(context.application, uid, tz, hhmm)
        await update.message.reply_text(f"‚úÖ Time set to {hhmm} ({tz})")
        return

    if not user.get("tz"):
        kb = [[InlineKeyboardButton(z, callback_data=f"tz|{z}")] for z in TIMEZONES]
        await update.message.reply_text(
            "Choose your timezone:", reply_markup=InlineKeyboardMarkup(kb)
        )
    else:
        await update.message.reply_text(
            f"Current time: {user['summary_at']} ({user['tz']}). "
            "Send /settime HH:MM to change."
        )


async def tz_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, tz = q.data.split("|", 1)
    uid = q.from_user.id
    database.upsert_user(uid, tz=tz, summary_at="09:00")
    schedule_user_summary(context.application, uid, tz, "09:00")
    await q.edit_message_text(f"Timezone set to {tz}. Default time 09:00.")


def _fmt_coin_row(c: dict) -> str:
    ch = c["price_change_percentage_24h"] or 0
    arrow = "üî∫" if ch >= 0 else "üîª"
    row_plain = f"*{c['symbol'].upper():<5}* {arrow} {ch:+.1f}% (${c['current_price']:,.2f})"
    return escape_markdown(row_plain, version=2)


async def gainers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ups, downs = get_top_gainers_losers()
    text = "*Top 24 h Gainers*\n" + "\n".join(_fmt_coin_row(c) for c in ups)
    text += "\n\n*Top 24 h Losers*\n" + "\n".join(_fmt_coin_row(c) for c in downs)
    await update.message.reply_markdown_v2(text + "\n\n_Not financial advice_", reply_markup=get_back_keyboard())


async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("Usage: /price btc")
        return

    coin = lookup_coin(context.args[0])
    if not coin:
        await update.message.reply_text("Coin not found.")
        return

    plain = (
        f"*{coin['name']}* ({coin['symbol'].upper()})\n"
        f"Price: ${coin['current_price']:,.2f}\n"
        f"24 h: {coin['price_change_percentage_24h']:+.2f}%\n"
        f"Market cap: ${coin['market_cap']:,.0f}\n\n"
        "_Not financial advice_"
    )
    md = escape_markdown(plain, version=2)
    await update.message.reply_markdown_v2(md, reply_markup=get_back_keyboard())


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ alert commands ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def alert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: /alert btc > 50000"""
    if len(context.args) < 3:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /alert <–º–æ–Ω–µ—Ç–∞> <–æ–ø–µ—Ä–∞—Ç–æ—Ä> <—Ü–µ–Ω–∞>\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/alert btc > 50000\n"
            "/alert eth < 3000"
        )
        return
    
    coin = context.args[0].lower()
    operator = context.args[1]
    try:
        target_price = float(context.args[2])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
    if not get_coin_price(coin):
        await update.message.reply_text(f"–ú–æ–Ω–µ—Ç–∞ {coin.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if operator in [">", ">=", "–≤—ã—à–µ"]:
        above = True
    elif operator in ["<", "<=", "–Ω–∏–∂–µ"]:
        above = False
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ >, <, –≤—ã—à–µ, –Ω–∏–∂–µ")
        return
    
    uid = update.effective_user.id
    alert_id = database.add_alert(uid, coin, target_price, above)
    
    direction = "–≤—ã—à–µ" if above else "–Ω–∏–∂–µ"
    msg = (
        f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
        f"–ú–æ–Ω–µ—Ç–∞: {coin.upper()}\n"
        f"–£—Å–ª–æ–≤–∏–µ: {direction} ${target_price:,.2f}\n"
        f"ID: {alert_id}"
    )
    
    await update.message.reply_text(msg, reply_markup=get_back_keyboard())


async def myalerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    uid = update.effective_user.id
    alerts = database.get_user_alerts(uid)
    
    if not alerts:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /alert –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=get_back_keyboard()
        )
        return
    
    msg = "*–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n\n"
    for alert in alerts:
        direction = "–≤—ã—à–µ" if alert["above"] else "–Ω–∏–∂–µ"
        current_price = get_coin_price(alert["coin"])
        price_info = f" (—Ç–µ–∫—É—â–∞—è: ${current_price:,.2f})" if current_price else ""
        
        msg += (
            f"*{alert['id']}.* {alert['coin'].upper()} {direction} "
            f"${alert['target']:,.2f}{price_info}\n"
        )
    
    msg += "\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete <ID>"
    
    await update.message.reply_markdown_v2(
        escape_markdown(msg, version=2), 
        reply_markup=get_back_keyboard()
    )


async def delete_alert_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID"""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <ID>")
        return
    
    try:
        alert_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return
    
    uid = update.effective_user.id
    if database.delete_alert(alert_id, uid):
        await update.message.reply_text(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {alert_id} —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ portfolio commands ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏: /buy btc 0.1 50000"""
    if len(context.args) < 3:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buy <–º–æ–Ω–µ—Ç–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ü–µ–Ω–∞>\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/buy btc 0.1 50000\n"
            "/buy eth 2.5 3000"
        )
        return
    
    coin = context.args[0].lower()
    try:
        amount = float(context.args[1])
        price = float(context.args[2])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Ü–µ–Ω—ã.")
        return
    
    if amount <= 0 or price <= 0:
        await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
    if not get_coin_price(coin):
        await update.message.reply_text(f"–ú–æ–Ω–µ—Ç–∞ {coin.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    uid = update.effective_user.id
    tx_id = database.add_transaction(uid, coin, "buy", amount, price)
    total = amount * price
    
    msg = (
        f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"–ú–æ–Ω–µ—Ç–∞: {coin.upper()}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}\n"
        f"–¶–µ–Ω–∞: ${price:,.2f}\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞: ${total:,.2f}\n"
        f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_id}"
    )
    
    await update.message.reply_text(msg, reply_markup=get_back_keyboard())


async def sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏: /sell btc 0.05 55000"""
    if len(context.args) < 3:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sell <–º–æ–Ω–µ—Ç–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ü–µ–Ω–∞>\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/sell btc 0.05 55000\n"
            "/sell eth 1.0 3200"
        )
        return
    
    coin = context.args[0].lower()
    try:
        amount = float(context.args[1])
        price = float(context.args[2])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Ü–µ–Ω—ã.")
        return
    
    if amount <= 0 or price <= 0:
        await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
    if not get_coin_price(coin):
        await update.message.reply_text(f"–ú–æ–Ω–µ—Ç–∞ {coin.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    uid = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    portfolio = database.get_user_portfolio(uid)
    coin_position = next((pos for pos in portfolio if pos["coin"] == coin), None)
    
    if not coin_position or coin_position["amount"] < amount:
        await update.message.reply_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {coin.upper()} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {coin_position['amount'] if coin_position else 0}"
        )
        return
    
    tx_id = database.add_transaction(uid, coin, "sell", amount, price)
    total = amount * price
    
    msg = (
        f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"–ú–æ–Ω–µ—Ç–∞: {coin.upper()}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}\n"
        f"–¶–µ–Ω–∞: ${price:,.2f}\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞: ${total:,.2f}\n"
        f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_id}"
    )
    
    await update.message.reply_text(msg, reply_markup=get_back_keyboard())


async def portfolio_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    uid = update.effective_user.id
    summary = database.get_portfolio_summary(uid, get_coin_price)
    
    if summary["positions"] == 0:
        await update.message.reply_text(
            "–í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫.",
            reply_markup=get_back_keyboard()
        )
        return
    
    msg = "*üíº –í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:*\n\n"
    
    # –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
    pnl_emoji = "üî∫" if summary["total_pnl"] >= 0 else "üîª"
    msg += (
        f"*–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* ${summary['total_current']:,.2f}\n"
        f"*–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:* ${summary['total_invested']:,.2f}\n"
        f"*P&L:* {pnl_emoji} ${summary['total_pnl']:+,.2f} ({summary['total_pnl_percent']:+.1f}%)\n"
        f"*–ü–æ–∑–∏—Ü–∏–π:* {summary['positions']}\n\n"
    )
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
    msg += "*–ü–æ–∑–∏—Ü–∏–∏:*\n"
    for pos in summary["positions_detail"]:
        pnl_emoji = "üî∫" if pos["pnl"] >= 0 else "üîª"
        msg += (
            f"*{pos['coin'].upper()}*: {pos['amount']} √ó ${pos['current_price']:,.2f} = "
            f"${pos['current_value']:,.2f}\n"
            f"  P&L: {pnl_emoji} ${pos['pnl']:+,.2f} ({pos['pnl_percent']:+.1f}%)\n\n"
        )
    
    await update.message.reply_markdown_v2(
        escape_markdown(msg, version=2), 
        reply_markup=get_back_keyboard()
    )


async def transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    uid = update.effective_user.id
    txs = database.get_user_transactions(uid, 10)
    
    if not txs:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –∏–ª–∏ /sell –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=get_back_keyboard()
        )
        return
    
    msg = "*üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:*\n\n"
    
    for tx in txs:
        tx_type = "üü¢ –ü–æ–∫—É–ø–∫–∞" if tx["type"] == "buy" else "üî¥ –ü—Ä–æ–¥–∞–∂–∞"
        date = datetime.fromisoformat(tx["date"].replace('Z', '+00:00')).strftime("%d.%m %H:%M")
        msg += (
            f"*{tx['id']}.* {tx_type} {tx['coin'].upper()}\n"
            f"  {tx['amount']} √ó ${tx['price']:,.2f} = ${tx['total']:,.2f}\n"
            f"  {date}\n\n"
        )
    
    await update.message.reply_markdown_v2(
        escape_markdown(msg, version=2), 
        reply_markup=get_back_keyboard()
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ callback handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "main_menu":
        msg = "üëã Crypto Summary Bot\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        await query.edit_message_text(msg, reply_markup=get_main_menu_keyboard())
        
    elif data == "summary":
        raw_snapshot = get_market_summary()
        plain = summarize_text(raw_snapshot) + "\n\n_Not financial advice_"
        md = escape_markdown(plain, version=2)
        await query.edit_message_text(md, parse_mode="MarkdownV2", reply_markup=get_back_keyboard())
        
    elif data == "gainers":
        ups, downs = get_top_gainers_losers()
        text = "*Top 24 h Gainers*\n" + "\n".join(_fmt_coin_row(c) for c in ups)
        text += "\n\n*Top 24 h Losers*\n" + "\n".join(_fmt_coin_row(c) for c in downs)
        await query.edit_message_text(text + "\n\n_Not financial advice_", parse_mode="MarkdownV2", reply_markup=get_back_keyboard())
        
    elif data == "price_search":
        msg = (
            "üí∞ –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: btc, eth, ada)\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /price <—Å–∏–º–≤–æ–ª>"
        )
        await query.edit_message_text(msg, reply_markup=get_back_keyboard())
        
    elif data == "alerts":
        msg = (
            "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."
        )
        await query.edit_message_text(msg, reply_markup=get_alerts_keyboard())
        
    elif data == "add_alert":
        msg = (
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "`/alert <–º–æ–Ω–µ—Ç–∞> <–æ–ø–µ—Ä–∞—Ç–æ—Ä> <—Ü–µ–Ω–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `/alert btc > 50000` - –∫–æ–≥–¥–∞ BTC –±—É–¥–µ—Ç –≤—ã—à–µ $50,000\n"
            "‚Ä¢ `/alert eth < 3000` - –∫–æ–≥–¥–∞ ETH –±—É–¥–µ—Ç –Ω–∏–∂–µ $3,000\n\n"
            "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã: >, <, –≤—ã—à–µ, –Ω–∏–∂–µ"
        )
        await query.edit_message_text(msg, reply_markup=get_back_keyboard())
        
    elif data == "list_alerts":
        uid = query.from_user.id
        alerts = database.get_user_alerts(uid)
        
        if not alerts:
            msg = (
                "üìã –í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/alert` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
            )
        else:
            msg = "*üìã –í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n\n"
            for alert in alerts:
                direction = "–≤—ã—à–µ" if alert["above"] else "–Ω–∏–∂–µ"
                current_price = get_coin_price(alert["coin"])
                price_info = f" (—Ç–µ–∫—É—â–∞—è: ${current_price:,.2f})" if current_price else ""
                
                msg += (
                    f"*{alert['id']}.* {alert['coin'].upper()} {direction} "
                    f"${alert['target']:,.2f}{price_info}\n"
                )
            
            msg += "\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/delete <ID>`"
        
        await query.edit_message_text(
            escape_markdown(msg, version=2), 
            parse_mode="MarkdownV2",
            reply_markup=get_back_keyboard()
        )
        
    elif data == "portfolio":
        msg = (
            "üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã."
        )
        await query.edit_message_text(msg, reply_markup=get_portfolio_keyboard())
        
    elif data == "portfolio_overview":
        uid = query.from_user.id
        summary = database.get_portfolio_summary(uid, get_coin_price)
        
        if summary["positions"] == 0:
            msg = (
                "üíº –í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n\n"
                "–í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/buy` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫."
            )
        else:
            pnl_emoji = "üî∫" if summary["total_pnl"] >= 0 else "üîª"
            msg = (
                f"üíº *–í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ*\n\n"
                f"*–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* ${summary['total_current']:,.2f}\n"
                f"*–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:* ${summary['total_invested']:,.2f}\n"
                f"*P&L:* {pnl_emoji} ${summary['total_pnl']:+,.2f} ({summary['total_pnl_percent']:+.1f}%)\n"
                f"*–ü–æ–∑–∏—Ü–∏–π:* {summary['positions']}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/portfolio` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
            )
        
        await query.edit_message_text(
            escape_markdown(msg, version=2), 
            parse_mode="MarkdownV2",
            reply_markup=get_back_keyboard()
        )
        
    elif data == "transactions_list":
        uid = query.from_user.id
        txs = database.get_user_transactions(uid, 10)
        
        if not txs:
            msg = (
                "üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã `/buy` –∏–ª–∏ `/sell` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
            )
        else:
            msg = "*üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:*\n\n"
            
            for tx in txs:
                tx_type = "üü¢ –ü–æ–∫—É–ø–∫–∞" if tx["type"] == "buy" else "üî¥ –ü—Ä–æ–¥–∞–∂–∞"
                date = datetime.fromisoformat(tx["date"].replace('Z', '+00:00')).strftime("%d.%m %H:%M")
                msg += (
                    f"*{tx['id']}.* {tx_type} {tx['coin'].upper()}\n"
                    f"  {tx['amount']} √ó ${tx['price']:,.2f} = ${tx['total']:,.2f}\n"
                    f"  {date}\n\n"
                )
        
        await query.edit_message_text(
            escape_markdown(msg, version=2), 
            parse_mode="MarkdownV2",
            reply_markup=get_back_keyboard()
        )
        
    elif data == "add_buy":
        msg = (
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "`/buy <–º–æ–Ω–µ—Ç–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ü–µ–Ω–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `/buy btc 0.1 50000` - –∫—É–ø–∏–ª 0.1 BTC –ø–æ $50,000\n"
            "‚Ä¢ `/buy eth 2.5 3000` - –∫—É–ø–∏–ª 2.5 ETH –ø–æ $3,000\n\n"
            "–ú–æ–Ω–µ—Ç–∞: —Å–∏–º–≤–æ–ª (btc, eth, ada, etc.)\n"
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: —Å–∫–æ–ª—å–∫–æ –∫—É–ø–∏–ª–∏\n"
            "–¶–µ–Ω–∞: —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –≤ USD"
        )
        await query.edit_message_text(msg, reply_markup=get_back_keyboard())
        
    elif data == "add_sell":
        msg = (
            "‚ûñ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "`/sell <–º–æ–Ω–µ—Ç–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ü–µ–Ω–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `/sell btc 0.05 55000` - –ø—Ä–æ–¥–∞–ª 0.05 BTC –ø–æ $55,000\n"
            "‚Ä¢ `/sell eth 1.0 3200` - –ø—Ä–æ–¥–∞–ª 1.0 ETH –ø–æ $3,200\n\n"
            "–ú–æ–Ω–µ—Ç–∞: —Å–∏–º–≤–æ–ª (btc, eth, ada, etc.)\n"
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–ª–∏\n"
            "–¶–µ–Ω–∞: —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –≤ USD"
        )
        await query.edit_message_text(msg, reply_markup=get_back_keyboard())
        
    elif data == "settime":
        uid = query.from_user.id
        user = database.get_user(uid) or {}
        
        if not user.get("tz"):
            kb = [[InlineKeyboardButton(z, callback_data=f"tz|{z}")] for z in TIMEZONES]
            kb.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", 
                reply_markup=InlineKeyboardMarkup(kb)
            )
        else:
            await query.edit_message_text(
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {user['summary_at']} ({user['tz']})\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=get_time_keyboard()
            )
            
    elif data == "help":
        msg = (
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å\n\n"
            "üìä **–°–≤–æ–¥–∫–∞ —Ä—ã–Ω–∫–∞** - AI-–∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞\n"
            "üìà **–¢–æ–ø —Ä–∞—Å—Ç—É—â–∏–µ/–ø–∞–¥–∞—é—â–∏–µ** - –ª—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ –º–æ–Ω–µ—Ç—ã –∑–∞ 24 —á–∞—Å–∞\n"
            "üí∞ **–ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã** - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç–µ\n"
            "üíº **–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n"
            "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö\n"
            "‚è∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏** - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–æ–¥–æ–∫\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /summary - —Å–≤–æ–¥–∫–∞ —Ä—ã–Ω–∫–∞\n"
            "‚Ä¢ /gainers - —Ç–æ–ø –º–æ–Ω–µ—Ç\n"
            "‚Ä¢ /price <–º–æ–Ω–µ—Ç–∞> - —Ü–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã\n"
            "‚Ä¢ /buy <–º–æ–Ω–µ—Ç–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ü–µ–Ω–∞> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É\n"
            "‚Ä¢ /sell <–º–æ–Ω–µ—Ç–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ü–µ–Ω–∞> - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É\n"
            "‚Ä¢ /portfolio - –æ–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n"
            "‚Ä¢ /transactions - –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "‚Ä¢ /alert <–º–æ–Ω–µ—Ç–∞> <–æ–ø–µ—Ä–∞—Ç–æ—Ä> <—Ü–µ–Ω–∞> - –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
            "‚Ä¢ /myalerts - –º–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ /delete <ID> - —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
            "‚Ä¢ /settime HH:MM - –≤—Ä–µ–º—è —Å–≤–æ–¥–æ–∫\n\n"
            "_Not financial advice_"
        )
        await query.edit_message_text(msg, reply_markup=get_back_keyboard())
        
    elif data.startswith("tz|"):
        _, tz = data.split("|", 1)
        uid = query.from_user.id
        database.upsert_user(uid, tz=tz, summary_at="09:00")
        schedule_user_summary(context.application, uid, tz, "09:00")
        await query.edit_message_text(
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz}\n–í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 09:00\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–æ–¥–æ–∫:",
            reply_markup=get_time_keyboard()
        )
        
    elif data.startswith("time|"):
        _, time_str = data.split("|", 1)
        uid = query.from_user.id
        user = database.get_user(uid) or {}
        tz = user.get("tz", "UTC")
        
        database.upsert_user(uid, summary_at=time_str)
        schedule_user_summary(context.application, uid, tz, time_str)
        
        await query.edit_message_text(
            f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str} ({tz})\n\n"
            "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_back_keyboard()
        )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ bootstrap ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def start_bot():
    database.init_db()

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start",   start))
    app.add_handler(CommandHandler("summary", summary))
    app.add_handler(CommandHandler("settime", settime))
    app.add_handler(CommandHandler("gainers", gainers))
    app.add_handler(CommandHandler("price",   price))
    app.add_handler(CommandHandler("alert",   alert))
    app.add_handler(CommandHandler("myalerts", myalerts))
    app.add_handler(CommandHandler("delete",  delete_alert_cmd))
    app.add_handler(CommandHandler("buy",     buy))
    app.add_handler(CommandHandler("sell",    sell))
    app.add_handler(CommandHandler("portfolio", portfolio_cmd))
    app.add_handler(CommandHandler("transactions", transactions))
    app.add_handler(CallbackQueryHandler(handle_callback))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    app.job_queue.run_repeating(check_price_alerts, interval=300)

    # Reschedule summaries on restart
    for u in database.all_users():
        schedule_user_summary(app, u["user_id"], u["tz"], u["summary_at"])

    logger.info("ü§ñ Bot live")
    app.run_polling()